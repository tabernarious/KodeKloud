# Docker for CentOS 7
https://docs.docker.com/engine/install/centos/#prerequisites

Hardware
    Hypervisor
        Virtual Machine 1
            OS
                Docker
                    Container 1
                        App
                        Libs
                        Deps
                    Container 2
                        App
                        Libs
                        Deps
        Virtual Machine 2
            OS
                Docker
                    Container 1
                        App
                        Libs
                        Deps
                    Container 2
                        App
                        Libs
                        Deps

# Docker containers share the OS's kernel
# Linux Docker host can have containers running CentOS, SUSE, Fedora, etc.

# Public Docker registry/repository: dockerhub

docker run ansible
docker run mongodb
docker run redis
docker nodejs
docker nodejs
# Need LB for multiple identical containers

# Docker Image: Package/template/plan (like VM template)
# You can create your own images and upload them to dockerhub

# Docker Container: Running instance of an image in a process-isolated environment

# Docker File: Guide/runbook of requirements, used to create a Docker Image

# Docker Enterprise Edition
    * image management
    * image security
    * universal control plane

# Docker Community Edition
    * Linux
    * Mac
    * Windows
    * Native Cloud (e.g. AWS, Azure, GCP)

# docs.docker.com

# INSTALL Docker for CentOS 7
https://docs.docker.com/engine/install/centos/#prerequisites

# Clean up first
$ sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

$ sudo yum install -y yum-utils

$ sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

$ sudo yum install docker-ce docker-ce-cli containerd.io

    # OPTIONAL
    # List available versions of Docker
    $ yum list docker-ce --showduplicates | sort -r

    $ sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io

# Start Docker
$ sudo systemctl start docker

# Docker Version
$ sudo docker version

# Test install
$ sudo docker run hello-world

# Uninstall the Docker Engine, CLI, and Containerd packages
$ sudo yum remove docker-ce docker-ce-cli containerd.io

# Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes
$ sudo rm -rf /var/lib/docker

# OPTIONAL Post-installation steps for Linux
https://docs.docker.com/engine/install/linux-postinstall/

# The Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The Docker daemon always runs as the root user.

If you donâ€™t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group.

# This may already be done
$ sudo groupadd docker

$ sudo usermod -aG docker $USER

# Start on Boot
$ chkconfig docker
$ sudo systemctl enable docker
$ chkconfig docker

# COMMANDS

# Start a docker container
docker run [image or container name]

# List running containers
docker ps

# List running and previously run containers
docker ps -a

# Stop running container (can use first ~4 characters of the ID, as long as they are unique)
docker stop [container ID or name]

# Delete container
docker rm [container name]
docker rm [container1] [container2] [container3]

# List images (local)
docker images

# Delete image (must stop and delete containers using the image)
docker rmi [image]

# Download images without running
docker pull [image]

# Start container and immediately execute a command in the container
docker run [image or container name] [command]
docker run ubuntu sleep 100

# Execute a command on a running container
docker exec [container] [command]
docker exec distracted_mcclintock cat /etc/hosts

# Run container "detached" (default is attached)
docker run -d [container]

# Attach to running detached container
docker attach [container]

# Use non-default (offical) docker hub repository (library)
docker run mmumshad/ansible-playable

# Log in to container (example)
docker run -it centos bash

# Attach to container in interactive mode (allow input)
docker run -i myapp

# Attach to container in interactive mode with terminal (show prompts)
docker run -it myapp

# Map docker host port to container port
docker run -p 80:5000 myapp
docker run -p 443:443 myapp
docker run -p 3306:3306 myapp
docker run -p 8080:8080 -p 50000:50000 jenkins
docker run -d -p 38282:8080 kodekloud/simple-webapp:blue

# Map docker host directory to container directory
docker run -v /opt/datadir:/var/lib/mysql mysql

# View full details about container
docker inspect [name]

# View logs/stdout of detached container
docker logs [name]

# Set environment variable in container
docker run -e APP_COLOR=blue simple-webapp
docker run -e APP_COLOR=orange simple-webapp
docker run -e APP_COLOR=green simple-webapp
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql

# View environment variables on running container
docker inspect [name]
# Look for "Config" then "Env"

# DOCKER IMAGES

docker run -it centos:7 bash
yum -y update
yum -y install python
yum -y install epel-release
yum -y install python2-pip
pip install flask
pip install flask-mysql

cat > /opt/app.py
import os
from flask import Flask
app = Flask(__name__)

@app.route("/")
def main():
    return "Welcome!"

@app.route('/how are you')
def hello():
    return 'I am good, how about you?'

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)


FLASK_APP=/opt/app.py flask run --host=0.0.0.0

# CREATE DOCKER FILE

mkdir my-simple-webapp
cd my-simple-webapp
cat > Dockerfile
FROM centos:7
RUN yum -y update
RUN yum -y install python
RUN yum -y install epel-release
RUN yum -y install python2-pip
RUN pip install flask
RUN pip install flask-mysql

COPY app.py /opt/app.py

ENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0

# BUILD DOCKER IMAGE

docker build . -t tabernarious/my-simple-webapp

# UPLOAD DOCKER IMAGE TO DOCKER HUB

docker login

docker push tabernarious/my-simple-webapp

# ENTRYPOINT vs CMD
# ENTRYPOINT sets the beginning of the command; any additional values are appended when the container starts
ENTRYPOINT ["sleep"]

# Execute "sleep 10" when starting the container, because "sleep" is already defined in the Dockerfile
docker run ubuntu-sleeper 10

# CMD sets the full command to be run whe the container starts (must have every element separated in list format); if "docker run [name] [command]" is executed, [command] will override whatever is set in CMD of the Dockerfile
CMD ["sleep", "5"]
# Exectue "sleep 10" when starting the container, even though the CMD is "sleep 5"
docker run ubuntu-sleeper-5 sleep 10

# USE ENTRYPOINT and CMD together
ENTRYPOINT ["sleep"]
CMD ["5"]

# Execute "sleep 5" (CMD is appended to ENTRYPOINT if no commands are specified)
docker run ubuntu-sleeper

# Execute "sleep 10"
docker run ubuntu-sleeper 10

# OVERRIDE ENTRYPOINT
ENTRYPOINT ["sleep"]
CMD ["5"]

# Run "sleep2.0 10"
docker run --entrypoint sleep2.0 ubuntu-sleeper 10

# Docker Compose
# YAML file to assemble an entire set of containers/services to deploy together
# Can only launch containers on a single docker host

docker run -d --name redis redis
docker run -d --name db
docker run -d --name vote -p 5000:80 voting-app
docker run -d --name result -p 5001:80 result-app
docker run -d --name=worker worker
# Doesn't quite worker

# LINKS (deprecated, so may be going away)

docker run -d --name redis redis
docker run -d --name db postgres:9.4
docker run -d --name vote -p 5000:80 --link redis:redis voting-app
docker run -d --name result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link redis:redis worker

# COMPOSE
# links named "db" will assume "db:db"

cat > docker-compose.yml
redis:
  image: redis
db:
  image: postgres:9.4
vote:
  image: voting-app
  ports:
    - 5000:80
  links:
    - redis:redis
result:
  image: result-app
  ports:
    - 5001:80
  links:
    - db:db
worker:
  image: worker
  links:
    - redis:redis
    - db:db

# "image:" can be replaced with "build: ./app-name" where app-name directory includes Dockerfile

cat > docker-compose.yml
redis:
  image: redis
db:
  image: postgres:9.4
vote:
  build: ./vote
  ports:
    - 5000:80
  links:
    - redis:redis
result:
  build: ./result
  ports:
    - 5001:80
  links:
    - db:db
worker:
  build: ./worker
  links:
    - redis:redis
    - db:db

# Docker Compose Versions
# v1 (above); all containers attached to *default* "bridged" network
# v2 (below); must state version; creates separate "bridged" network for these services; links not required if names match

version: 2
services:
  redis:
    image: redis
  db:
    image: postgres:9.4
  vote:
    image: voting-app
    ports:
      - 5000:80
    depends_on:
      - redis

# v3 (below); services section like v2; discussed later

# NETWORKING

cat > docker-compose.yml
version: 2
services:
  redis:
    image: redis
    networks:
      - back-end
  db:
    image: postgres:9.4
    networks:
      - back-end
  vote:
    image: voting-app
    networks:
      - front-end
      - back-end
  result:
    image: result
    networks:
      - front-end
      - back-end
networks:
  front-end:
  back-end:





# Docker Compose Lab

docker run -d --name db -e POSTGRES_PASSWORD=mysecretpassword postgres
docker run -d --name wordpress --link db -p 8085:80
docker stop wordpress db
docker rm wordpress db

cat > docker-compose.yml
db:
  image: postgres
  environment:
    - POSTGRES_PASSWORD=mysecretpassword
wordpress:
  image: wordpress
  ports:
    - 8085:80
  links:
    - db

docker-compose up -d
docker-compose down

docker stop wordpress_wordpress_1
docker stop wordpress_db_1
docker rm wordpress_wordpress_1
docker rm wordpress_db_1
docker ps -a

# DOCKER ENGINE: Docker CLI, REST API, Dockre Daemon
# Docker CLI can be on a separate machine
docker -H=[remote-docker-engine-ip]:2375
docker -H=192.168.1.5:2375 run nginx

# Namespace - PID
# Container launches a process on the host (which gets the next PID) which is mapped to PID 1 (root process) within the container (namespace). Subsequent processes launched in the container namespace receive the next PID on the host and are mapped to the next PID within the container namespace.

# cgroups
# Containers inherently have no limits on host hardware resources (CPU and memory). This can be limited with options:

docker run --cpus=.5 ubuntu
docker run --memory=100m ubuntu

# File system
/var/lib/docker
  aufs
  containers
  image
  volumes

# Layered Architecture
# Dockerfile specifies layers; "docker build" takes base image, launches it, performs the actions of layer 2, records those changes (snapshot/journal), performs the actions of layer 3, records those changes, etc.
# Docker caches each layer and reuses them for subsequent image builds.
# Image layers are read-only
# Container is a layer on top of the image layers, but is read-write

# Volumes
# Create new volume named "data_volume" at /var/lib/docker/volumes/data_volume
docker voluem create data_volume

# Launch container and map /var/lib/mysql (in the container) to /var/lib/docker/volumes/data_volume (on the host) ("volume mount")
docker run -v data_volume:/var/lib/mysql mysql
# NOTE: Docker will auto-create new volumes if the specified volume doesn't exist

# Lauch container and map /var/lib/mysql (container) to /var/tmp/my_data (host) ("bind mount")
docker run -v /var/tmp/my_data:/var/lib/mysql mysql
# NOTE: "-v" is old style

# Modern style
docker run --mount type=bind,source=/var/tmp/my_data,target=/var/lib/mysql mysql

# NOTE: Docker uses storage drivers relevant to the host's operating system (e.g. AUFS, Device Mapper, etc.).

# Lab
docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql

mkdir /opt/data
docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 --mount type=bind,source=/opt/data,target=/var/lib/mysql mysql

https://docs.docker.com/storage/
https://docs.docker.com/storage/storagedriver/

# NETWORKING
# Three default networks: bridge (connected by default), none, and host
docker run ubuntu
docker run ubuntu --network=none
docker run ubuntu --network=host

# Bridge Network: Private isolated internal network (172.17.0.x)

# Host Network: No isolation from the Docker host system. Containers with ports exposed will be accessible directly on the host IP

# None Network: Container has no network connectivity (externally or to other containers)

# User-Defined Networks
docker network create --driver bridge --subnet 182.18.0.0/16 [network name]

# List all docker networks
docker network ls

# View container network settings
docker inspect [container]

# Containers can connect to each other by referencing the container name. Docker maintains a DNS server with records mapping containers and IPs.
# Docker DNS Server: 127.0.0.11

# Lab
docker network ls
docker inspect alpine-1
docker network inspect bridge
docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network
docker run -d --name mysql-db --network=wp-mysql-network -e MYSQL_ROOT_PASSWORD=db_pass123 mysql:5.6

# Not enough (needs additional environment variable)
docker run -d --name webapp -p 38080:8080 -e DB_Host=mysql-db --network=wp-mysql-network kodekloud/simple-webapp-mysql

# Just enough (has DB_Password environment variable set)
docker run -d --name webapp -p 38080:8080 -e DB_Host=mysql-db -e DB_Password=db_pass123 --network=wp-mysql-network kodekloud/simple-webapp-mysql

# More than enough
docker run -d --name webapp -p 38080:8080 -e DB_Host=mysql-db -e DB_Database=mysql -e DB_User=root -e DB_Password=db_pass123 --network=wp-mysql-network kodekloud/simple-webapp-mysql

#Either I did something wrong or this was intended to be very challenging. The webapp container needed the DB_Password environment variable set (the Flask page is confusing in that it says several environment variables are not set which is not quite true--they have default values). I had to look in the GitHub repo's app.py to see that the fallback for DB_Password did not match what we set for the mysql db.

# DOCKER REGISTRY
image: nginx
image: nginx/nginx
image: user/repository
image: docker.io/nginx/nginx
image: gcr.io/kubernetes-e2e-test-images/dnsutils

# Private Registry
# Must login to private registry before executing pull or run (when using a private registry)
docker login [private registry fqdn]
docker run [private registry fqdn]/apps/internal-app

# Run your own private registry
docker run -d -p 5000:5000 --name registry registry:2

# Upload to a private registry
docker image tag my-image localhost:5000/my-image
docker image tag my-image [private registry fqdn]:[port]/[image name]
docker push [private registry fqdn]:[port]/[image name]
docker push localhost:5000/my-image
docker pull 192.168.56.100:5000/my-image


